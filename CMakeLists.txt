cmake_minimum_required(VERSION 3.8)
project(FixingCollisions)

################################################################################

# libigl-options
option(LIBIGL_WITH_OPENGL               "Use OpenGL"         ON)
option(LIBIGL_WITH_OPENGL_GLFW          "Use GLFW"           ON)
option(LIBIGL_WITH_OPENGL_GLFW_IMGUI    "Use IMGUI"          ON)

# project-options
option(BUILD_UNIT_TESTS         "Build unit-tests"     ON)
option(BUILD_SCRIPTS            "Build scripts"        ON)
option(ENABLE_DERIVATIVE_CHECK  "Check Derivatives"    ON)
option(ENABLE_IPOPT             "Enable Ipopt Library" ON)
option(ENABLE_OSQP              "Enable OSQP Library"  ON)
option(ENABLE_MOSEK             "Enable Mosek Library" OFF)
option(CODE_COVERAGE            "Builds targets with code coverage instrumentation. (Requires GCC or Clang)" OFF)

################################################################################

### Configuration
set(FIXING_COLLISIONS_EXTERNAL "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(Autogen)
include(Warnings)
include(UseColors)
include(${PROJECT_NAME}Dependencies)

################################################################################
# Fixing Collisions Library
################################################################################
add_library(${PROJECT_NAME}
    src/autodiff/finitediff.cpp
    src/autodiff/autodiff.cpp

    src/ccd/degenerate_edge_error.cpp
    src/ccd/impact.cpp
    src/ccd/hash_grid.cpp
    src/ccd/collision_detection_narrow_phase.cpp
    src/ccd/collision_detection_broad_phase.cpp
    src/ccd/prune_impacts.cpp
    src/ccd/time_of_impact.cpp

    src/io/read_scene.cpp
    src/io/write_scene.cpp
    src/io/opt_results.cpp

    src/physics/rigid_body.cpp
    src/physics/rigid_body_system.cpp
    src/physics/mass_matrix.cpp
    src/physics/center_of_mass.cpp

    src/opt/barrier.cpp
    src/opt/barrier_constraint.cpp
    src/opt/collision_constraint.cpp
    src/opt/optimization_problem.cpp
    src/opt/ad_hoc_problem.cpp
    src/opt/optimization_results.cpp
    src/opt/particles_problem.cpp
    src/opt/volume_constraint.cpp
    src/opt/rigid_body_problem.cpp

    src/solvers/barrier_solver.cpp
    src/solvers/ipopt_solver.cpp
    src/solvers/lcp_solver.cpp
    src/solvers/ncp_solver.cpp
    src/solvers/line_search.cpp
    src/solvers/newton_solver.cpp
    src/solvers/nlopt_solver.cpp
    src/solvers/optimization_solver.cpp
    src/solvers/qp_solver.cpp

    src/utils/eigen_ext.cpp

    src/state.cpp
    src/logger.cpp
    src/profiler.cpp

    # Generated files
    src/autogen/time_of_impact_coeff.tpp
    src/autogen/collision_volume.tpp

)

target_include_directories(${PROJECT_NAME} PUBLIC src)

# Use C++14
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_14)

# Autogenerated files ----------------------------------------------------------
project_autogen(${PROJECT_NAME} time_of_impact_coeff.py time_of_impact_coeff.tpp auto_time_of_impact_coeff)
project_autogen(${PROJECT_NAME} collision_volume.py collision_volume.tpp auto_collision_volume)
target_sources(${PROJECT_NAME} PRIVATE
    src/autogen/auto_collision_volume.cpp
    src/autogen/auto_time_of_impact_coeff.cpp
)

# Directory paths
set(OPT_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/figures/data")
target_compile_definitions(${PROJECT_NAME} PUBLIC -DOPT_OUTPUT_DIR=\"${OPT_OUTPUT_DIR}\")

set(FIXTURES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/fixtures)
target_compile_definitions(${PROJECT_NAME} PUBLIC -DFIXTURES_DIR=\"${FIXTURES_DIR}\")

set(DATA_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/data")
target_compile_definitions(${PROJECT_NAME} PUBLIC -DDATA_OUTPUT_DIR=\"${DATA_OUTPUT_DIR}\")

if(ENABLE_DERIVATIVE_CHECK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DWITH_DERIVATIVE_CHECK)
endif()

################################################################################
# Fixing Collisions Executable
################################################################################

add_executable(${PROJECT_NAME}_bin
    src/viewer/edges_to_rectangles.cpp
    src/viewer/viewer.cpp
    src/viewer/viewer_crud.cpp
    src/viewer/viewer_draw.cpp
    src/viewer/viewer_menu.cpp
    src/viewer/viewer_editor.cpp
    src/viewer/imgui_ext.cpp
    src/viewer/solver_view.cpp
    src/viewer/constraint_view.cpp
    src/viewer/procedural_scenes.cpp

    src/main.cpp
)

target_include_directories(${PROJECT_NAME}_bin PRIVATE src)
target_link_libraries(${PROJECT_NAME}_bin PUBLIC ${PROJECT_NAME})

# Fixtures folder --------------------------------------------------------------
add_custom_command(TARGET ${PROJECT_NAME}_bin POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/fixtures
        $<TARGET_FILE_DIR:${PROJECT_NAME}_bin>/fixtures)

################################################################################
# Required Libraries
################################################################################

# libigl
target_link_libraries(${PROJECT_NAME} PUBLIC igl::core igl::opengl igl::opengl_glfw igl::opengl_glfw_imgui)

# Extra warnings
target_link_libraries(${PROJECT_NAME} PRIVATE warnings::all)

# Json Parser
target_link_libraries(${PROJECT_NAME} PUBLIC nlohmann_json::nlohmann_json)

# NLopt
target_link_libraries(${PROJECT_NAME} PUBLIC nlopt::nlopt)

# Logger
target_link_libraries(${PROJECT_NAME} PUBLIC spdlog::spdlog)

# Ipopt
if(ENABLE_IPOPT)
    find_package(IPOPT)
    if (IPOPT_FOUND)
        message(STATUS "Including IPOPT")
        target_compile_definitions(${PROJECT_NAME} PUBLIC -DBUILD_WITH_IPOPT)
        target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${IPOPT_INCLUDE_DIR} )
        link_directories(${IPOPT_LIBRARY_DIR})
        target_link_libraries(${PROJECT_NAME} PUBLIC ${IPOPT_LIBRARY})
    endif()
endif()

# OSQP
if(ENABLE_OSQP)
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DBUILD_WITH_OSQP)
    target_link_libraries(${PROJECT_NAME} PUBLIC osqp::osqp)
endif()

# Mosek
if(ENABLE_MOSEK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DBUILD_WITH_MOSEK)
    target_link_libraries(${PROJECT_NAME} PUBLIC mosek::mosek)
endif()

################################################################################
# Tests
################################################################################

if(CODE_COVERAGE)
    message(STATUS "Building with code coverage")
    include(CodeCoverage)
    add_code_coverage_all_targets()

    target_code_coverage(${PROJECT_NAME})
    target_code_coverage(${PROJECT_NAME}_bin)
endif()

if(BUILD_UNIT_TESTS)
    # Catch2
    if(NOT TARGET Catch2::Catch2)
        download_catch2()
        add_subdirectory(${FIXING_COLLISIONS_EXTERNAL}/Catch2 catch2)
        list(APPEND CMAKE_MODULE_PATH ${FIXING_COLLISIONS_EXTERNAL}/Catch2/contrib)
    endif()

    include(CTest)
    enable_testing()
    add_subdirectory(tests)
endif()

################################################################################
# Scripts
################################################################################

if(BUILD_SCRIPTS)
#    add_subdirectory(scripts)
endif()
