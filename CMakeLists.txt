cmake_minimum_required(VERSION 3.1) # TODO: Update this to version 3.8
project(FixingCollisions)

# TODO: Update this to `target_compile_features(my_target PUBLIC cxx_std_14)`
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
################################################################################

set(THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rd_party)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
set(FIXTURES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/fixtures)
add_definitions(-DFIXTURES_DIR="${FIXTURES_DIR}")
list(APPEND CMAKE_MODULE_PATH ${THIRD_PARTY_DIR}/Catch2/contrib)

include(Autogen)
include(Warnings)
include(PrependPath)
include(${PROJECT_NAME}Dependencies)

################################################################################
# libigl-options
option(LIBIGL_WITH_OPENGL               "Use OpenGL"         ON)
option(LIBIGL_WITH_OPENGL_GLFW          "Use GLFW"           ON)
option(LIBIGL_WITH_OPENGL_GLFW_IMGUI    "Use IMGUI"          ON)

# project-options
option(BUILD_UNIT_TESTS                 "Build unit-tests"      ON)
option(BUILD_SCRIPTS                    "Build scripts"         ON)
option(ENABLE_DERIVATIVE_CHECK            "Check Derivatives"     ON)
option(ENABLE_IPOPT                     "Enable Ipopt Library"  ON)
option(ENABLE_OSQP                      "Enable OSQP Library"   ON)
option(ENABLE_MOSEK                     "Enable Mosek Library"  OFF)

################################################################################
# Fixing Collisions Library
################################################################################
set(SRCFILES
    src/ccd/not_implemented_error.cpp
    src/ccd/degenerate_edge_error.cpp
    src/ccd/impact.cpp
    src/ccd/hash_grid.cpp
    src/ccd/collision_detection_narrow_phase.cpp
    src/ccd/collision_detection_broad_phase.cpp
    src/ccd/prune_impacts.cpp
    src/ccd/collision_volume.cpp
    src/ccd/collision_constraint_diff.cpp
    src/ccd/collision_volume_diff.cpp
    src/ccd/collision_penalty_diff.cpp
    src/ccd/time_of_impact.cpp

    src/io/read_scene.cpp
    src/io/write_scene.cpp
    src/io/opt_results.cpp

    src/opt/barrier.cpp
    src/opt/newtons_method.cpp
    src/opt/optimization_problem.cpp
    src/opt/optimization_results.cpp
    src/opt/optimization_solver.cpp
    src/opt/displacement_opt.cpp
    src/opt/nlopt_solver.cpp
    src/opt/qp_solver.cpp
    src/opt/ipopt_solver.cpp
    src/opt/ncp_solver.cpp
    src/opt/lcp_solver.cpp
    src/opt/barrier_newton_solver.cpp
    src/opt/collision_constraint.cpp
    src/opt/volume_constraint.cpp
    src/opt/barrier_constraint.cpp

    src/autodiff/finitediff.cpp
    src/autodiff/autodiff.cpp

    src/state.cpp
    src/logger.cpp
    src/profiler.cpp

    src/rigid_bodies/rigid_body.cpp
)

set(TMPFILES
     src/autogen/time_of_impact_coeff.tpp
     src/autogen/collision_volume.tpp)

add_library(${PROJECT_NAME}  ${TMPFILES} ${SRCFILES})
target_include_directories(${PROJECT_NAME} PUBLIC src)

# Autogenerated files ---------------------------------------------------------
project_autogen(${PROJECT_NAME} time_of_impact_coeff.py time_of_impact_coeff.tpp auto_time_of_impact_coeff)
project_autogen(${PROJECT_NAME} collision_volume.py collision_volume.tpp auto_collision_volume)
set(AUTOGEN
    src/autogen/auto_collision_volume.cpp
    src/autogen/auto_time_of_impact_coeff.cpp)
prepend_path(${PROJECT_SOURCE_DIR} AUTOGEN)
target_sources(${PROJECT_NAME} PUBLIC ${AUTOGEN})

set(OPT_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/figures/data")
add_definitions(-DOPT_OUTPUT_DIR=\"${OPT_OUTPUT_DIR}\")

if(ENABLE_DERIVATIVE_CHECK)
    add_definitions(-DWITH_DERIVATIVE_CHECK)
endif()

################################################################################
# Fixing Collisions Executable
################################################################################
set(VIEWER_FILES

    src/viewer/edges_to_rectangles.cpp
    src/viewer/viewer.cpp
    src/viewer/viewer_crud.cpp
    src/viewer/viewer_draw.cpp
    src/viewer/viewer_menu.cpp
    src/viewer/viewer_editor.cpp
    src/viewer/imgui_ext.cpp
    src/viewer/solver_view.cpp
    src/viewer/constraint_view.cpp
    src/viewer/procedural_scenes.cpp

    src/main.cpp
    )

add_executable(${PROJECT_NAME}_bin ${VIEWER_FILES})
target_include_directories(${PROJECT_NAME}_bin PRIVATE src)
target_link_libraries(${PROJECT_NAME}_bin PUBLIC ${PROJECT_NAME})

# Fixtures folder ---------------------------------------------------------
add_custom_command(TARGET ${PROJECT_NAME}_bin POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/fixtures
        $<TARGET_FILE_DIR:${PROJECT_NAME}_bin>/fixtures)

# Default output folder ----------------------------------------------------
set(DATA_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/data")
add_definitions(-DDATA_OUTPUT_DIR=\"${DATA_OUTPUT_DIR}\")
################################################################################
# Required Libraries
################################################################################
# libigl
find_package(LIBIGL REQUIRED QUIET)
target_link_libraries(${PROJECT_NAME} PUBLIC igl::core igl::opengl igl::opengl_glfw igl::opengl_glfw_imgui)

# Extra warnings
target_link_libraries(${PROJECT_NAME} PRIVATE warnings::all)

# Json Parser
add_library(json INTERFACE)
target_include_directories(json SYSTEM INTERFACE ${THIRD_PARTY_DIR}/json/include)
target_link_libraries(${PROJECT_NAME} PUBLIC json)

# NLopt
target_link_libraries(${PROJECT_NAME} PUBLIC nlopt::nlopt)

# Logger
target_link_libraries(${PROJECT_NAME} PUBLIC spdlog::spdlog)

# Ipopt
if(ENABLE_IPOPT)
    find_package(IPOPT)
    if (IPOPT_FOUND)
        message("Including IPOPT")
        add_definitions(-DBUILD_WITH_IPOPT)
        target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${IPOPT_INCLUDE_DIR} )
        link_directories(${IPOPT_LIBRARY_DIR})
        target_link_libraries(${PROJECT_NAME} PUBLIC ${IPOPT_LIBRARY})
    endif()
endif()

# OSQP
if(ENABLE_OSQP)
    add_definitions(-DBUILD_WITH_OSQP)
    target_link_libraries(${PROJECT_NAME} PUBLIC osqp::osqp)
endif()

# Mosek
if(ENABLE_MOSEK)
    add_definitions(-DBUILD_WITH_MOSEK)
    target_link_libraries(${PROJECT_NAME} PUBLIC mosek::mosek)
endif()

################################################################################
# Tests
################################################################################
if (CODE_COVERAGE)
    message("Building with code coverage")
    include(CodeCoverage)
    add_code_coverage_all_targets()

    target_code_coverage(${PROJECT_NAME})
    target_code_coverage(${PROJECT_NAME}_bin)

endif()

if(BUILD_UNIT_TESTS)
    # catch - for testing
    download_catch2()
    add_library(catch INTERFACE)
    target_include_directories(catch SYSTEM INTERFACE ${THIRD_PARTY_DIR}/Catch2/single_include/catch2)

    include(CTest)
    enable_testing()
    add_subdirectory(tests)

    if (CODE_COVERAGE)
        target_code_coverage(unit_tests AUTO ALL)
    endif()
endif()

################################################################################
# Scripts
################################################################################
if(BUILD_SCRIPTS)
#    add_subdirectory(scripts)
endif()
